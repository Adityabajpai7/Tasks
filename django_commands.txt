django-admin:

Global command-line utility for all Django projects.
Use when managing multiple Django projects or setting DJANGO_SETTINGS_MODULE explicitly.
Installed globally if Django is installed via pip.
Example use: django-admin startapp myapp.
  
manage.py:

Project-specific command-line utility automatically created in each Django project.
Sets DJANGO_SETTINGS_MODULE to project's settings.py.
Use for most tasks within a single Django project.
Example use: python manage.py runserver.
  
Usage:

Prefer manage.py for daily project tasks.
Use django-admin for multiple projects or custom settings configurations.
Commands can often interchangeably use django-admin, manage.py, or python -m django.

  COMMANDS:
1. django-admin --help to display usage information and a list of the commands provided by each application.
2. django-admin version -- to display the current Django version.
3. django-admin check auth admin myapp --  inspect the entire Django project for common problems.
4. django-admin check --database default --database other -- Specifies the database to run checks requiring database access:
5. django-admin compilemessages -- Compiles .po files created by makemessages to .mo files for use with the built-in gettext support. 
6. django-admin createcachetable -- Creates the cache tables for use with the database cache backend using the information from your settings file
7. --dry-run -- rints the SQL that would be run without actually running it.
8. django-admin dbshell -- Runs the command-line client for the database engine specified in your ENGINE setting,
                          with the connection parameters specified in your USER, PASSWORD, etc.,
9. django-admin diffsettings -- Displays differences between the current settings file and Djangoâ€™s default settings
10. django-admin dumpdata [app_label[.ModelName] [app_label[.ModelName] ...]] -- Outputs to standard output all data in the database associated with the named application(s).
                                                                                If no application name is provided, all installed applications will be dumped.
11. django-admin flush -- Removes all data from the database and re-executes any post-synchronization handlers.
                          The table of which migrations have been applied is not cleared.
12. django-admin inspectdb [table [table ...]] --Introspects the database tables in the database pointed-to by the NAME setting 
                                                  and outputs a Django model module (a models.py file) to standard output.
13. django-admin loaddata fixture [fixture ...] -- Searches for and loads the contents of the named fixture into the database.
14. django-admin makemessages -- Runs over the entire source tree of the current directory and pulls out all strings marked for translation.
15. --all, -a -- Updates the message files for all available languages.
16. django-admin makemigrations [app_label [app_label ...]] -- Creates new migrations based on the changes detected to your models
17. django-admin migrate [app_label] [migration_name] -- Synchronizes the database state with the current set of models and migrations.
18. django-admin optimizemigration app_label migration_name -- Optimizes the operations for the named migration and overrides the existing file.
19. django-admin runserver [addrport] --Starts a lightweight development web server on the local machine. By default, the server runs on port 8000 on the IP address 127.0.0.1.
                                        You can pass in an IP address and port number explicitly.
20. django-admin sendtestemail [email [email ...]] -- Sends a test email (to confirm email sending through Django is working) to the recipient(s) specified.
21. django-admin shell -- Starts the Python interactive interpreter.
22. django-admin showmigrations [app_label [app_label ...]] -- Shows all migrations in a project.
23. django-admin sqlflush -- Prints the SQL statements that would be executed for the flush command.
24. django-admin sqlmigrate app_label migration_name -- Prints the SQL for the named migration. This requires an active database connection
25. django-admin startapp name [directory] -- Creates a Django app directory structure for the given app name in the current directory or the given destination.
26. --template TEMPLATE -- Provides the path to a directory with a custom app template file, or a path to an uncompressed archive (.tar) or a compressed archive
                            (.tar.gz, .tar.bz2, .tar.xz, .tar.lzma, .tgz, .tbz2, .txz, .tlz, .zip) containing the app template files.
27. django-admin startproject name [directory] -- Creates a Django project directory structure for the given project name in the current directory or the given destination.
28. django-admin test [test_label [test_label ...]] -- Runs tests for all installed apps.
29. django-admin testserver [fixture [fixture ...]] -- Runs a Django development server (as in runserver) using data from the given fixture(s).
